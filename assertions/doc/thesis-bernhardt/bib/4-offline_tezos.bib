@techreport{goodman_tezos_2014,
	title = {Tezos — a self-amending crypto-ledger {White} paper},
	abstract = {We present Tezos, a generic and self-amending crypto-ledger. Tezos can instantiate any blockchain based ledger. The operations of a regular blockchain are implemented as a purely functional module abstracted into a shell responsible for network operations. Bitcoin, Ethereum, Cryptonote, etc. can all be represented within Tezos by implementing the proper interface to the network layer. Most importantly, Tezos supports meta upgrades: the protocols can evolve by amending their own code. To achieve this, Tezos begins with a seed protocol defining a procedure for stakeholders to approve amendments to the protocol, including amendments to the voting procedure itself. This is not unlike philosopher Peter Suber’s Nomic[3], a game built around a fully introspective set of rules.},
	language = {en},
	author = {Goodman, L M},
    year = {2014}
}

@misc{nomic,
	title = {\relax{Nomic: A game of self-amendment}},
	author = {Suber, Peter},
	howpublished = {\url{http://legacy.earlham.edu/~peters/writing/nomic.htm}},
	year = {1982}
}

@misc{blaseball,
	title = {Blaseball Official Website},
	howpublished = {\url{https://www.blaseball.com/}},
	year = {2020}
}

@article{canou_tezos_nodate,
	title = {Tezos: the {OCaml} {Crypto}-{Ledger}},
	abstract = {In this talk, we will present the story of the Tezos project. Tezos is a crypto-ledger, i.e. a distributed blockchain with a language to express smart contracts, with two speciﬁc characteristics: the ﬁrst one is its ability for self-amendment, that allows a majority of stake-holders to update the behavior of Tezos without risking a fork; the second one is a design and implementation (in OCaml) that took into account safety and security from the very beginning, and in particular the use of static typing and formal methods when possible. For example, Michelson, the smart contract language of Tezos, is the only such language with a formal semantics, a type system ensuring no runtime errors, and an implementation that uses OCaml GADTs to ensure its correctness.},
	language = {en},
	author = {Canou, Benjamin and Henry, Grégoire and Chambart, Pierre and Fessant, Fabrice Le and Bozman, Cagdas and Bernardoff, Vincent and Rieu, Guillem and Iguernelala, Mohamed and Mebsout, Alain and Breitman, Arthur},
	year = {2017}
}

@misc{ocaml_docs,
	title = {\relax{The OCaml system release 4.11 - Documentation and user’s manual}},
	author = {Leroy, Xavier and others},
	year = {2020},
	institution = {INRIA},
	howpublished = {\url{https://caml.inria.fr/pub/docs/manual-ocaml/}}
}

@misc{tezos_docs,
	key = {Tezos},
	title = {\relax{Tezos - Developer Resources}},
	howpublished = {\url{http://tezos.gitlab.io/index.html}},
	year = {2021},
	note = {Accessed: 20.03.2021}
}

@misc{tezos_opam,
	title = {opam packages - tezos},
	howpublished = {\url{https://opam.ocaml.org/packages/tezos/}},
	year = {2021}
}

@misc{liquidity,
	title = {Liquidity},
	howpublished = {\url{https://www.liquidity-lang.org/}},
	year = {2020},
	organization = {OCamlPro SAS}	
}

@misc{smartpy,
	title = {SmartPy},
	year = {2021},
	howpublished = {\url{https://smartpy.io/}},
	organization = {Smart Chain Arena LLC}
}

@misc{fi,
	title = {Welcome to fi - smart coding for smart contracts},
	organization = {TezTech Labs},
	year = {2019},
	howpublished = {\url{https://fi-code.com/}}
}

@article{obsidian_flextesa_2020,
	title = {Introducing {Flextesa}: {Robust} {Testing} {Tools} for {Tezos} and its {Applications}},
	shorttitle = {Introducing {Flextesa}},
	url = {https://medium.com/@obsidian.systems/introducing-flextesa-robust-testing-tools-for-tezos-and-its-applications-edc1e336a209},
	abstract = {Testing plays an important and often overlooked role in developing software. Great applications need to account for the ‘what ifs’ and the…},
	language = {en},
	urldate = {2021-03-12},
	journal = {Medium},
	author = {Systems, Obsidian},
	month = jul,
	year = {2020}
}

@techreport{wood_ethereum_2021,
	title = {{ETHEREUM}: {A} {SECURE} {DECENTRALISED} {GENERALISED} {TRANSACTION} {LEDGER}},
	abstract = {The blockchain paradigm when coupled with cryptographically-secured transactions has demonstrated its utility through a number of projects, with Bitcoin being one of the most notable ones. Each such project can be seen as a simple application on a decentralised, but singleton, compute resource. We can call this paradigm a transactional singleton machine with shared-state.},
	language = {en},
	author = {Wood, Dr Gavin},
	year = {2021},
	institution = {www.ethereum.org}
}

@inproceedings{chatterjee_probabilistic_2019,
	address = {Seoul, Korea (South)},
	title = {Probabilistic {Smart} {Contracts}: {Secure} {Randomness} on the {Blockchain}},
	isbn = {978-1-72811-328-9},
	shorttitle = {Probabilistic {Smart} {Contracts}},
	url = {https://ieeexplore.ieee.org/document/8751326/},
	doi = {10.1109/BLOC.2019.8751326},
	language = {en},
	urldate = {2021-04-01},
	booktitle = {2019 {IEEE} {International} {Conference} on {Blockchain} and {Cryptocurrency} ({ICBC})},
	publisher = {IEEE},
	author = {Chatterjee, Krishnendu and Goharshady, Amir Kafshdar and Pourdamghani, Arash},
	month = may,
	year = {2019},
	pages = {403--412}
}

@misc{tezos_repo,
	title = {Tezos},
	year = {2019},
    journal = {GitHub repository},
	howpublished = {\url{https://gitlab.com/tezos/tezos/}}
}

@misc{morley_repo,
	title = {\relax{Morley: Developer tools for the Michelson Language}},
	year = {2021},
    journal = {GitHub repository},
	howpublished = {\url{https://gitlab.com/morley-framework/morley}}
}