<assertion contract> ::= <module> +
<module> ::= entrypoint ['%'IDENT] <pattern> '=' <assertion>
<pattern> ::=
  | '_'
  | nil
  | none
  | <var declaration>
  | '(' <prim pattern> ')'
<var declaration>::= '(' IDENT ':' <type> ')'
<prim pattern> ::=
  | pair <pattern> <pattern>
  | left <pattern>
  | right <pattern>
  | cons <pattern> <pattern>
  | some <pattern>
<type> ::=
  | int
  | bool
  | bytes
  | string
  | mutez
  | nat
  | address
  | chain_id
  | key
  | key_hash
  | operation
  | signature
  | timestamp
  | unit
  | list <type>
  | set <type>
  | option <type>
  | or <type> <type>
  | pair <type> <type>
  | lambda <type> <type>
  | map <type> <type>
  | contract <type>
  | big_map <type> <type>
  | '(' <type> ')'
<assertion> ::=
  | <quantifier> <var declaration> <assertion>
  | if <expression> then <assertion>
  | assert <expression>
<quantifier> ::= forall | exists
<atom> ::=
  | IDENT
  | <constant>
  | '(' <expression> ')'
<expression> ::=
  | <atom>
  | nth <expression> <expression>
  | <expression> <binop> <expression>
  | <unop> <atom>
  | slice <expression> <expression> <expression>
  | if <expression> then <expression> else <expression>
<constant> ::=
  | <bool literal>
  | INT_LITERAL
  | STRING_LITERAL
<bool literal> ::= true | false
<binop> ::=
  | '+'
  | '-'
  | '*'
  | '/'
  | '%'
  | "||"
  | "&&"
  | "xor"
  | "<<"
  | ">>"
  | '='
  | "<>"
  | '<'
  | '>'
  | ">="
  | "<="
<unop> ::= not | size | abs | '-' | '+'
