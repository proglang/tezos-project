(* Example contract:
 * parameter (or (pair (list int) int %A)
 *               (or (pair (list int) string %B)
 *                   (or (option bool %C) string %D))) 
 *)

(* %A: assert if input list is sorted *)
entrypoint %A (pair (p : list int) _ ) =
    forall (n: int)
        forall (m : int)
            if (n < (size p) && m < (size p)) then
	        if (n > m) then
        	    assert (nth n p) > (nth m p)

(* %B: simple assertion without any quantifiers *)
entrypoint %B (pair (l : list int) _ ) =
    if (size l) > 10 then
        assert (nth 9 l) = 7

(* %C: assertion without an "assert" expression *)
entrypoint %C (some (i : option bool))  =
    assert i

(* %D: assertion with the slice expression *)
entrypoint %D (s : string) =
    if (size s) > 0 then
        assert (slice 0 (size s) s) = s

============ OR ================================================

(* %A: assert if input list is sorted *)
entrypoint (left (pair (p : (list int)) _ )) =
    forall (n : int)
        forall (m : (list int))
            if (n < size p) && ( m < size p) then
	        if n > m then
		    assert (nth n p) > (nth m p)

(* %B: simple assertion without any quantifiers *)
entrypoint (right (left (pair (l : (list int) _ )))) =
    if (size l) > 10 then
        assert (nth 9 l) = 7

(* %C: assertion without an "assert" expression *)
entrypoint (right [right (left (some [i : bool]))]) =
    assert i

(* %D: assertion with the slice expression *)
entrypoint (right [right (right (s : string))]) =
    if (size s) > 0 then
        assert (slice 0 (size s) s) = s