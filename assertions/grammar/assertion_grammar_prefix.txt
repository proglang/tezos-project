<assertion contract> ::= <module> +
<module> ::=
  | '(' entrypoint ['%' <IDENT>] <pattern> <assertion app> ')'
  | '[' entrypoint ['%' <IDENT>] <pattern> <assertion app> ']'
<pattern> ::=
  | '_'
  | nil
  | none
  | <var declaration>
  | '(' <prim pattern> ')'
  | '[' <prim pattern> ']'
<var declaration> ::=
  | '(' IDENT ':' <type> ')'
  | '[' IDENT ':' <type> ']'
<prim pattern> ::=
  | pair <pattern> <pattern>
  | left <pattern>
  | right <pattern>
  | cons <pattern> <pattern>
  | some <pattern>
<assertion app> ::=
  | '(' <assertion> ')'
  | '[' <assertion> ']'
<assertion> ::=
  | <quantifier> <var declaration> <assertion app>
  | if <expression> <assertion app>
  | assert <expression>
<quantifier> ::= forall | exists
<type> ::=
  | int
  | bool
  | bytes
  | string
  | mutez
  | nat
  | address
  | chain_id
  | key
  | key_hash
  | operation
  | signature
  | timestamp
  | unit
  | '(' <composite type> ')'
  | '[' <composite type> ']'
<composite type> ::=
  | list <type>
  | set <type>
  | option <type>
  | or <type> <type>
  | pair <type> <type>
  | lambda <type> <type>
  | map <type> <type>
  | contract <type>
  | big_map <type> <type>
<expression> ::=
  | IDENT
  | <constant>
  | '(' if <expression> <expression> <expression> ')'
  | '[' if <expression> <expression> <expression> ']'
  | <primitive app>
<constant> ::=
  | <bool literal>
  | INT_LITERAL
  | STRING_LITERAL
<bool literal> ::= true | false
<prim app> ::=
  | '(' <primitive> ')'
  | '[' <primitive> ']'
<primitive> ::=
  | <unop> <expression>
  | <binop> <expression> <expression>
  | slice <expression> <expression> <expression>
  | <expression>
<unop> ::=
  | size
  | abs
  | neg
  | not
<binop> ::=
  | nth
  | add
  | sub
  | mul
  | div
  | mod
  | or
  | and
  | xor
  | lsl
  | lsr
  | eq
  | neq
  | lt
  | gt
  | le
  | ge
